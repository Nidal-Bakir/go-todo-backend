// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: otp.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const oTPCreateNewOtp = `-- name: OTPCreateNewOtp :one
INSERT INTO otp (
        code,
        intent,
        otp_for,
        using_session_id,
        expires_at
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, code, hit_count, created_at, updated_at, expires_at, deleted_at, intent, otp_for, using_session_id
`

type OTPCreateNewOtpParams struct {
	Code           string             `json:"code"`
	Intent         string             `json:"intent"`
	OtpFor         pgtype.Int4        `json:"otp_for"`
	UsingSessionID pgtype.Int4        `json:"using_session_id"`
	ExpiresAt      pgtype.Timestamptz `json:"expires_at"`
}

// OTPCreateNewOtp
//
//	INSERT INTO otp (
//	        code,
//	        intent,
//	        otp_for,
//	        using_session_id,
//	        expires_at
//	    )
//	VALUES ($1, $2, $3, $4, $5)
//	RETURNING id, code, hit_count, created_at, updated_at, expires_at, deleted_at, intent, otp_for, using_session_id
func (q *Queries) OTPCreateNewOtp(ctx context.Context, arg OTPCreateNewOtpParams) (Otp, error) {
	row := q.db.QueryRow(ctx, oTPCreateNewOtp,
		arg.Code,
		arg.Intent,
		arg.OtpFor,
		arg.UsingSessionID,
		arg.ExpiresAt,
	)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.HitCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.DeletedAt,
		&i.Intent,
		&i.OtpFor,
		&i.UsingSessionID,
	)
	return i, err
}

const oTPGetActiveOtpByIdPairedWithSessionId = `-- name: OTPGetActiveOtpByIdPairedWithSessionId :one
SELECT id, code, hit_count, created_at, updated_at, expires_at, deleted_at, intent, otp_for, using_session_id
FROM otp
WHERE id = $1
    AND using_session_id = $2
    AND hit_count < 3
    AND expires_at > NOW()
    AND deleted_at IS NULL
LIMIT 1
`

type OTPGetActiveOtpByIdPairedWithSessionIdParams struct {
	ID             int32       `json:"id"`
	UsingSessionID pgtype.Int4 `json:"using_session_id"`
}

// OTPGetActiveOtpByIdPairedWithSessionId
//
//	SELECT id, code, hit_count, created_at, updated_at, expires_at, deleted_at, intent, otp_for, using_session_id
//	FROM otp
//	WHERE id = $1
//	    AND using_session_id = $2
//	    AND hit_count < 3
//	    AND expires_at > NOW()
//	    AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) OTPGetActiveOtpByIdPairedWithSessionId(ctx context.Context, arg OTPGetActiveOtpByIdPairedWithSessionIdParams) (Otp, error) {
	row := q.db.QueryRow(ctx, oTPGetActiveOtpByIdPairedWithSessionId, arg.ID, arg.UsingSessionID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.HitCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.DeletedAt,
		&i.Intent,
		&i.OtpFor,
		&i.UsingSessionID,
	)
	return i, err
}

const oTPRecordHitForOtp = `-- name: OTPRecordHitForOtp :one
UPDATE otp
SET hit_count = hit_count + 1
WHERE id = $1
RETURNING id, code, hit_count, created_at, updated_at, expires_at, deleted_at, intent, otp_for, using_session_id
`

// OTPRecordHitForOtp
//
//	UPDATE otp
//	SET hit_count = hit_count + 1
//	WHERE id = $1
//	RETURNING id, code, hit_count, created_at, updated_at, expires_at, deleted_at, intent, otp_for, using_session_id
func (q *Queries) OTPRecordHitForOtp(ctx context.Context, id int32) (Otp, error) {
	row := q.db.QueryRow(ctx, oTPRecordHitForOtp, id)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.HitCount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.DeletedAt,
		&i.Intent,
		&i.OtpFor,
		&i.UsingSessionID,
	)
	return i, err
}

const oTPSoftDeleteOtp = `-- name: OTPSoftDeleteOtp :exec
UPDATE otp
SET deleted_at = NOW()
WHERE id = $1
`

// OTPSoftDeleteOtp
//
//	UPDATE otp
//	SET deleted_at = NOW()
//	WHERE id = $1
func (q *Queries) OTPSoftDeleteOtp(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, oTPSoftDeleteOtp, id)
	return err
}
