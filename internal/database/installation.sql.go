// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: installation.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const installationAttachUserToInstallationById = `-- name: InstallationAttachUserToInstallationById :exec
UPDATE installation
SET attach_to = $2,
    last_attach_to= NULL
WHERE id = $1
    AND attach_to IS NULL
`

type InstallationAttachUserToInstallationByIdParams struct {
	ID       int32       `json:"id"`
	AttachTo pgtype.Int4 `json:"attach_to"`
}

// InstallationAttachUserToInstallationById
//
//	UPDATE installation
//	SET attach_to = $2,
//	    last_attach_to= NULL
//	WHERE id = $1
//	    AND attach_to IS NULL
func (q *Queries) InstallationAttachUserToInstallationById(ctx context.Context, arg InstallationAttachUserToInstallationByIdParams) error {
	_, err := q.db.Exec(ctx, installationAttachUserToInstallationById, arg.ID, arg.AttachTo)
	return err
}

const installationAttachUserToInstallationByToken = `-- name: InstallationAttachUserToInstallationByToken :exec
UPDATE installation
SET attach_to = $2,
    last_attach_to= NULL
WHERE installation_token = $1
    AND attach_to IS NULL
`

type InstallationAttachUserToInstallationByTokenParams struct {
	InstallationToken string      `json:"installation_token"`
	AttachTo          pgtype.Int4 `json:"attach_to"`
}

// InstallationAttachUserToInstallationByToken
//
//	UPDATE installation
//	SET attach_to = $2,
//	    last_attach_to= NULL
//	WHERE installation_token = $1
//	    AND attach_to IS NULL
func (q *Queries) InstallationAttachUserToInstallationByToken(ctx context.Context, arg InstallationAttachUserToInstallationByTokenParams) error {
	_, err := q.db.Exec(ctx, installationAttachUserToInstallationByToken, arg.InstallationToken, arg.AttachTo)
	return err
}

const installationCreateNewInstallation = `-- name: InstallationCreateNewInstallation :exec
INSERT INTO installation (
        installation_token,
        notification_token,
        locale,
        timezone_offset_in_minutes,
        device_manufacturer,
        device_os,
        device_os_version,
        app_version
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InstallationCreateNewInstallationParams struct {
	InstallationToken       string      `json:"installation_token"`
	NotificationToken       pgtype.Text `json:"notification_token"`
	Locale                  string      `json:"locale"`
	TimezoneOffsetInMinutes int32       `json:"timezone_offset_in_minutes"`
	DeviceManufacturer      pgtype.Text `json:"device_manufacturer"`
	DeviceOs                pgtype.Text `json:"device_os"`
	DeviceOsVersion         pgtype.Text `json:"device_os_version"`
	AppVersion              string      `json:"app_version"`
}

// InstallationCreateNewInstallation
//
//	INSERT INTO installation (
//	        installation_token,
//	        notification_token,
//	        locale,
//	        timezone_offset_in_minutes,
//	        device_manufacturer,
//	        device_os,
//	        device_os_version,
//	        app_version
//	    )
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
func (q *Queries) InstallationCreateNewInstallation(ctx context.Context, arg InstallationCreateNewInstallationParams) error {
	_, err := q.db.Exec(ctx, installationCreateNewInstallation,
		arg.InstallationToken,
		arg.NotificationToken,
		arg.Locale,
		arg.TimezoneOffsetInMinutes,
		arg.DeviceManufacturer,
		arg.DeviceOs,
		arg.DeviceOsVersion,
		arg.AppVersion,
	)
	return err
}

const installationDetachUserFromInstallationById = `-- name: InstallationDetachUserFromInstallationById :exec
UPDATE installation
SET attach_to = NULL,
    last_attach_to = $2
WHERE id = $1
`

type InstallationDetachUserFromInstallationByIdParams struct {
	ID           int32       `json:"id"`
	LastAttachTo pgtype.Int4 `json:"last_attach_to"`
}

// InstallationDetachUserFromInstallationById
//
//	UPDATE installation
//	SET attach_to = NULL,
//	    last_attach_to = $2
//	WHERE id = $1
func (q *Queries) InstallationDetachUserFromInstallationById(ctx context.Context, arg InstallationDetachUserFromInstallationByIdParams) error {
	_, err := q.db.Exec(ctx, installationDetachUserFromInstallationById, arg.ID, arg.LastAttachTo)
	return err
}

const installationDetachUserFromInstallationByToken = `-- name: InstallationDetachUserFromInstallationByToken :exec
UPDATE installation
SET attach_to = NULL,
        last_attach_to = $2
WHERE installation_token = $1
`

type InstallationDetachUserFromInstallationByTokenParams struct {
	InstallationToken string      `json:"installation_token"`
	LastAttachTo      pgtype.Int4 `json:"last_attach_to"`
}

// InstallationDetachUserFromInstallationByToken
//
//	UPDATE installation
//	SET attach_to = NULL,
//	        last_attach_to = $2
//	WHERE installation_token = $1
func (q *Queries) InstallationDetachUserFromInstallationByToken(ctx context.Context, arg InstallationDetachUserFromInstallationByTokenParams) error {
	_, err := q.db.Exec(ctx, installationDetachUserFromInstallationByToken, arg.InstallationToken, arg.LastAttachTo)
	return err
}

const installationGetInstallationUsingToken = `-- name: InstallationGetInstallationUsingToken :one
SELECT id, installation_token, notification_token, locale, timezone_offset_in_minutes, device_manufacturer, device_os, device_os_version, app_version, created_at, updated_at, deleted_at, attach_to, last_attach_to
FROM installation
WHERE installation_token = $1
    AND deleted_at IS NULL
LIMIT 1
`

// InstallationGetInstallationUsingToken
//
//	SELECT id, installation_token, notification_token, locale, timezone_offset_in_minutes, device_manufacturer, device_os, device_os_version, app_version, created_at, updated_at, deleted_at, attach_to, last_attach_to
//	FROM installation
//	WHERE installation_token = $1
//	    AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) InstallationGetInstallationUsingToken(ctx context.Context, installationToken string) (Installation, error) {
	row := q.db.QueryRow(ctx, installationGetInstallationUsingToken, installationToken)
	var i Installation
	err := row.Scan(
		&i.ID,
		&i.InstallationToken,
		&i.NotificationToken,
		&i.Locale,
		&i.TimezoneOffsetInMinutes,
		&i.DeviceManufacturer,
		&i.DeviceOs,
		&i.DeviceOsVersion,
		&i.AppVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AttachTo,
		&i.LastAttachTo,
	)
	return i, err
}

const installationGetInstallationUsingTokenAndWhereAttachTo = `-- name: InstallationGetInstallationUsingTokenAndWhereAttachTo :one
SELECT id, installation_token, notification_token, locale, timezone_offset_in_minutes, device_manufacturer, device_os, device_os_version, app_version, created_at, updated_at, deleted_at, attach_to, last_attach_to
FROM installation
WHERE installation_token = $1
    AND attach_to = $2
    AND deleted_at IS NULL
LIMIT 1
`

type InstallationGetInstallationUsingTokenAndWhereAttachToParams struct {
	InstallationToken string      `json:"installation_token"`
	AttachTo          pgtype.Int4 `json:"attach_to"`
}

// InstallationGetInstallationUsingTokenAndWhereAttachTo
//
//	SELECT id, installation_token, notification_token, locale, timezone_offset_in_minutes, device_manufacturer, device_os, device_os_version, app_version, created_at, updated_at, deleted_at, attach_to, last_attach_to
//	FROM installation
//	WHERE installation_token = $1
//	    AND attach_to = $2
//	    AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) InstallationGetInstallationUsingTokenAndWhereAttachTo(ctx context.Context, arg InstallationGetInstallationUsingTokenAndWhereAttachToParams) (Installation, error) {
	row := q.db.QueryRow(ctx, installationGetInstallationUsingTokenAndWhereAttachTo, arg.InstallationToken, arg.AttachTo)
	var i Installation
	err := row.Scan(
		&i.ID,
		&i.InstallationToken,
		&i.NotificationToken,
		&i.Locale,
		&i.TimezoneOffsetInMinutes,
		&i.DeviceManufacturer,
		&i.DeviceOs,
		&i.DeviceOsVersion,
		&i.AppVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AttachTo,
		&i.LastAttachTo,
	)
	return i, err
}

const installationSoftDeleteInstallation = `-- name: InstallationSoftDeleteInstallation :exec
UPDATE installation
SET deleted_at = NOW()
WHERE id = $1
`

// InstallationSoftDeleteInstallation
//
//	UPDATE installation
//	SET deleted_at = NOW()
//	WHERE id = $1
func (q *Queries) InstallationSoftDeleteInstallation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, installationSoftDeleteInstallation, id)
	return err
}

const installationUpdateInstallation = `-- name: InstallationUpdateInstallation :exec
UPDATE installation
SET notification_token = $2,
    locale = $3,
    timezone_Offset_in_minutes = $4,
    app_version = $5
WHERE installation_token = $1
    AND deleted_at IS NULL
`

type InstallationUpdateInstallationParams struct {
	InstallationToken       string      `json:"installation_token"`
	NotificationToken       pgtype.Text `json:"notification_token"`
	Locale                  string      `json:"locale"`
	TimezoneOffsetInMinutes int32       `json:"timezone_offset_in_minutes"`
	AppVersion              string      `json:"app_version"`
}

// InstallationUpdateInstallation
//
//	UPDATE installation
//	SET notification_token = $2,
//	    locale = $3,
//	    timezone_Offset_in_minutes = $4,
//	    app_version = $5
//	WHERE installation_token = $1
//	    AND deleted_at IS NULL
func (q *Queries) InstallationUpdateInstallation(ctx context.Context, arg InstallationUpdateInstallationParams) error {
	_, err := q.db.Exec(ctx, installationUpdateInstallation,
		arg.InstallationToken,
		arg.NotificationToken,
		arg.Locale,
		arg.TimezoneOffsetInMinutes,
		arg.AppVersion,
	)
	return err
}
