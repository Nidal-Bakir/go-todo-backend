// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: installation.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createNewInstallation = `-- name: CreateNewInstallation :one
INSERT INTO installation (
        installation_id,
        notification_token,
        locale,
        device_manufacturer,
        device_os,
        device_os_version,
        app_version
    )
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, installation_id, notification_token, locale, timezone_offset_in_minutes, device_manufacturer, device_os, device_os_version, app_version, created_at, updated_at, deleted_at, attach_to, last_attach_to
`

type CreateNewInstallationParams struct {
	InstallationID     uuid.UUID   `json:"installation_id"`
	NotificationToken  pgtype.Text `json:"notification_token"`
	Locale             string      `json:"locale"`
	DeviceManufacturer string      `json:"device_manufacturer"`
	DeviceOs           string      `json:"device_os"`
	DeviceOsVersion    string      `json:"device_os_version"`
	AppVersion         string      `json:"app_version"`
}

// CreateNewInstallation
//
//	INSERT INTO installation (
//	        installation_id,
//	        notification_token,
//	        locale,
//	        device_manufacturer,
//	        device_os,
//	        device_os_version,
//	        app_version
//	    )
//	VALUES ($1, $2, $3, $4, $5, $6, $7)
//	RETURNING id, installation_id, notification_token, locale, timezone_offset_in_minutes, device_manufacturer, device_os, device_os_version, app_version, created_at, updated_at, deleted_at, attach_to, last_attach_to
func (q *Queries) CreateNewInstallation(ctx context.Context, arg CreateNewInstallationParams) (Installation, error) {
	row := q.db.QueryRow(ctx, createNewInstallation,
		arg.InstallationID,
		arg.NotificationToken,
		arg.Locale,
		arg.DeviceManufacturer,
		arg.DeviceOs,
		arg.DeviceOsVersion,
		arg.AppVersion,
	)
	var i Installation
	err := row.Scan(
		&i.ID,
		&i.InstallationID,
		&i.NotificationToken,
		&i.Locale,
		&i.TimezoneOffsetInMinutes,
		&i.DeviceManufacturer,
		&i.DeviceOs,
		&i.DeviceOsVersion,
		&i.AppVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.AttachTo,
		&i.LastAttachTo,
	)
	return i, err
}

const softDeleteInstallation = `-- name: SoftDeleteInstallation :exec
UPDATE installation
SET deleted_at = NOW()
WHERE id = $1
`

// SoftDeleteInstallation
//
//	UPDATE installation
//	SET deleted_at = NOW()
//	WHERE id = $1
func (q *Queries) SoftDeleteInstallation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteInstallation, id)
	return err
}

const updateInstallation = `-- name: UpdateInstallation :exec
UPDATE installation
SET notification_token = $3,
    locale = $4,
    timezone_Offset_in_minutes = $5
WHERE id = $1
    AND installation_id = $2
    AND deleted_at IS NULL
`

type UpdateInstallationParams struct {
	ID                      int32       `json:"id"`
	InstallationID          uuid.UUID   `json:"installation_id"`
	NotificationToken       pgtype.Text `json:"notification_token"`
	Locale                  string      `json:"locale"`
	TimezoneOffsetInMinutes int32       `json:"timezone_offset_in_minutes"`
}

// UpdateInstallation
//
//	UPDATE installation
//	SET notification_token = $3,
//	    locale = $4,
//	    timezone_Offset_in_minutes = $5
//	WHERE id = $1
//	    AND installation_id = $2
//	    AND deleted_at IS NULL
func (q *Queries) UpdateInstallation(ctx context.Context, arg UpdateInstallationParams) error {
	_, err := q.db.Exec(ctx, updateInstallation,
		arg.ID,
		arg.InstallationID,
		arg.NotificationToken,
		arg.Locale,
		arg.TimezoneOffsetInMinutes,
	)
	return err
}
