// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const usersCreateNewUser = `-- name: UsersCreateNewUser :one
INSERT INTO users (
        username,
        profile_image,
        first_name,
        last_name,
        role_id
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
`

type UsersCreateNewUserParams struct {
	Username     string      `json:"username"`
	ProfileImage pgtype.Text `json:"profile_image"`
	FirstName    string      `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	RoleID       pgtype.Int4 `json:"role_id"`
}

// UsersCreateNewUser
//
//	INSERT INTO users (
//	        username,
//	        profile_image,
//	        first_name,
//	        last_name,
//	        role_id
//	    )
//	VALUES ($1, $2, $3, $4, $5)
//	RETURNING id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
func (q *Queries) UsersCreateNewUser(ctx context.Context, arg UsersCreateNewUserParams) (User, error) {
	row := q.db.QueryRow(ctx, usersCreateNewUser,
		arg.Username,
		arg.ProfileImage,
		arg.FirstName,
		arg.LastName,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProfileImage,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BlockedAt,
		&i.BlockedUntil,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const usersGetUserAndSessionDataBySessionToken = `-- name: UsersGetUserAndSessionDataBySessionToken :one
SELECT s.id as session_id,
    s.token as session_token,
    s.created_at as session_created_at,
    s.updated_at as session_updated_at,
    s.expires_at as session_expires_at,
    s.deleted_at as session_deleted_at,
    s.originated_from as session_originated_from,
    s.used_installation as session_used_installation,
    u.id as user_id,
    u.username as user_username,
    u.profile_image as user_profile_image,
    u.first_name as user_first_name,
    u.middle_name as user_middle_name,
    u.last_name as user_last_name,
    u.created_at as user_created_at,
    u.updated_at as user_updated_at,
    u.blocked_at as user_blocked_at,
    u.blocked_until as user_blocked_until,
    u.deleted_at as user_deleted_at,
    u.role_id as user_role_id
FROM session AS s
    JOIN login_option AS lo ON s.originated_from = lo.id
    JOIN users AS u ON u.id = lo.user_id
WHERE s.token = $1
    AND s.deleted_at IS NULL
    AND u.deleted_at IS NULL
    AND lo.deleted_at IS NULL
    AND s.expires_at > NOW()
LIMIT 1
`

type UsersGetUserAndSessionDataBySessionTokenRow struct {
	SessionID               int32              `json:"session_id"`
	SessionToken            string             `json:"session_token"`
	SessionCreatedAt        pgtype.Timestamptz `json:"session_created_at"`
	SessionUpdatedAt        pgtype.Timestamptz `json:"session_updated_at"`
	SessionExpiresAt        pgtype.Timestamptz `json:"session_expires_at"`
	SessionDeletedAt        pgtype.Timestamptz `json:"session_deleted_at"`
	SessionOriginatedFrom   int32              `json:"session_originated_from"`
	SessionUsedInstallation int32              `json:"session_used_installation"`
	UserID                  int32              `json:"user_id"`
	UserUsername            string             `json:"user_username"`
	UserProfileImage        pgtype.Text        `json:"user_profile_image"`
	UserFirstName           string             `json:"user_first_name"`
	UserMiddleName          pgtype.Text        `json:"user_middle_name"`
	UserLastName            pgtype.Text        `json:"user_last_name"`
	UserCreatedAt           pgtype.Timestamptz `json:"user_created_at"`
	UserUpdatedAt           pgtype.Timestamptz `json:"user_updated_at"`
	UserBlockedAt           pgtype.Timestamptz `json:"user_blocked_at"`
	UserBlockedUntil        pgtype.Timestamptz `json:"user_blocked_until"`
	UserDeletedAt           pgtype.Timestamptz `json:"user_deleted_at"`
	UserRoleID              pgtype.Int4        `json:"user_role_id"`
}

// UsersGetUserAndSessionDataBySessionToken
//
//	SELECT s.id as session_id,
//	    s.token as session_token,
//	    s.created_at as session_created_at,
//	    s.updated_at as session_updated_at,
//	    s.expires_at as session_expires_at,
//	    s.deleted_at as session_deleted_at,
//	    s.originated_from as session_originated_from,
//	    s.used_installation as session_used_installation,
//	    u.id as user_id,
//	    u.username as user_username,
//	    u.profile_image as user_profile_image,
//	    u.first_name as user_first_name,
//	    u.middle_name as user_middle_name,
//	    u.last_name as user_last_name,
//	    u.created_at as user_created_at,
//	    u.updated_at as user_updated_at,
//	    u.blocked_at as user_blocked_at,
//	    u.blocked_until as user_blocked_until,
//	    u.deleted_at as user_deleted_at,
//	    u.role_id as user_role_id
//	FROM session AS s
//	    JOIN login_option AS lo ON s.originated_from = lo.id
//	    JOIN users AS u ON u.id = lo.user_id
//	WHERE s.token = $1
//	    AND s.deleted_at IS NULL
//	    AND u.deleted_at IS NULL
//	    AND lo.deleted_at IS NULL
//	    AND s.expires_at > NOW()
//	LIMIT 1
func (q *Queries) UsersGetUserAndSessionDataBySessionToken(ctx context.Context, token string) (UsersGetUserAndSessionDataBySessionTokenRow, error) {
	row := q.db.QueryRow(ctx, usersGetUserAndSessionDataBySessionToken, token)
	var i UsersGetUserAndSessionDataBySessionTokenRow
	err := row.Scan(
		&i.SessionID,
		&i.SessionToken,
		&i.SessionCreatedAt,
		&i.SessionUpdatedAt,
		&i.SessionExpiresAt,
		&i.SessionDeletedAt,
		&i.SessionOriginatedFrom,
		&i.SessionUsedInstallation,
		&i.UserID,
		&i.UserUsername,
		&i.UserProfileImage,
		&i.UserFirstName,
		&i.UserMiddleName,
		&i.UserLastName,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.UserBlockedAt,
		&i.UserBlockedUntil,
		&i.UserDeletedAt,
		&i.UserRoleID,
	)
	return i, err
}

const usersGetUserById = `-- name: UsersGetUserById :one
SELECT id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
FROM users
WHERE id = $1
    AND deleted_at IS NULL
LIMIT 1
`

// UsersGetUserById
//
//	SELECT id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
//	FROM users
//	WHERE id = $1
//	    AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) UsersGetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, usersGetUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProfileImage,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BlockedAt,
		&i.BlockedUntil,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const usersGetUserBySessionToken = `-- name: UsersGetUserBySessionToken :one
SELECT u.id, u.username, u.profile_image, u.first_name, u.middle_name, u.last_name, u.created_at, u.updated_at, u.blocked_at, u.blocked_until, u.deleted_at, u.role_id
FROM session AS s
    JOIN login_option AS lo ON s.originated_from = lo.id
    JOIN users AS u ON u.id = lo.user_id
WHERE s.token = $1
    AND s.deleted_at IS NULL
    AND u.deleted_at IS NULL
    AND lo.deleted_at IS NULL
    AND s.expires_at > NOW()
LIMIT 1
`

// UsersGetUserBySessionToken
//
//	SELECT u.id, u.username, u.profile_image, u.first_name, u.middle_name, u.last_name, u.created_at, u.updated_at, u.blocked_at, u.blocked_until, u.deleted_at, u.role_id
//	FROM session AS s
//	    JOIN login_option AS lo ON s.originated_from = lo.id
//	    JOIN users AS u ON u.id = lo.user_id
//	WHERE s.token = $1
//	    AND s.deleted_at IS NULL
//	    AND u.deleted_at IS NULL
//	    AND lo.deleted_at IS NULL
//	    AND s.expires_at > NOW()
//	LIMIT 1
func (q *Queries) UsersGetUserBySessionToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRow(ctx, usersGetUserBySessionToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProfileImage,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BlockedAt,
		&i.BlockedUntil,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const usersIsUsernameUsed = `-- name: UsersIsUsernameUsed :one
SELECT COUNT(*)
FROM users
WHERE username = $1
`

// UsersIsUsernameUsed
//
//	SELECT COUNT(*)
//	FROM users
//	WHERE username = $1
func (q *Queries) UsersIsUsernameUsed(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, usersIsUsernameUsed, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const usersSoftDeleteUser = `-- name: UsersSoftDeleteUser :exec
UPDATE users
SET deleted_at = NOW()
WHERE id = $1
`

// UsersSoftDeleteUser
//
//	UPDATE users
//	SET deleted_at = NOW()
//	WHERE id = $1
func (q *Queries) UsersSoftDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, usersSoftDeleteUser, id)
	return err
}

const usersUpdateUserData = `-- name: UsersUpdateUserData :one
UPDATE users
SET username = $2,
    profile_image = $3,
    first_name = $4,
    last_name = $5,
    role_id = $6
WHERE id = $1
RETURNING id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
`

type UsersUpdateUserDataParams struct {
	ID           int32       `json:"id"`
	Username     string      `json:"username"`
	ProfileImage pgtype.Text `json:"profile_image"`
	FirstName    string      `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	RoleID       pgtype.Int4 `json:"role_id"`
}

// UsersUpdateUserData
//
//	UPDATE users
//	SET username = $2,
//	    profile_image = $3,
//	    first_name = $4,
//	    last_name = $5,
//	    role_id = $6
//	WHERE id = $1
//	RETURNING id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
func (q *Queries) UsersUpdateUserData(ctx context.Context, arg UsersUpdateUserDataParams) (User, error) {
	row := q.db.QueryRow(ctx, usersUpdateUserData,
		arg.ID,
		arg.Username,
		arg.ProfileImage,
		arg.FirstName,
		arg.LastName,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProfileImage,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BlockedAt,
		&i.BlockedUntil,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const usersUpdateUsernameForUser = `-- name: UsersUpdateUsernameForUser :exec
UPDATE users
SET username = $2
WHERE id = $1
`

type UsersUpdateUsernameForUserParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

// UsersUpdateUsernameForUser
//
//	UPDATE users
//	SET username = $2
//	WHERE id = $1
func (q *Queries) UsersUpdateUsernameForUser(ctx context.Context, arg UsersUpdateUsernameForUserParams) error {
	_, err := q.db.Exec(ctx, usersUpdateUsernameForUser, arg.ID, arg.Username)
	return err
}
