// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (
        username,
        profile_image,
        first_name,
        last_name,
        role_id
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
`

type CreateNewUserParams struct {
	Username     string      `json:"username"`
	ProfileImage pgtype.Text `json:"profile_image"`
	FirstName    string      `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	RoleID       pgtype.Int4 `json:"role_id"`
}

// CreateNewUser
//
//	INSERT INTO users (
//	        username,
//	        profile_image,
//	        first_name,
//	        last_name,
//	        role_id
//	    )
//	VALUES ($1, $2, $3, $4, $5)
//	RETURNING id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createNewUser,
		arg.Username,
		arg.ProfileImage,
		arg.FirstName,
		arg.LastName,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProfileImage,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BlockedAt,
		&i.BlockedUntil,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
FROM users
WHERE id = $1
    AND deleted_at IS NULL
LIMIT 1
`

// GetUserById
//
//	SELECT id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
//	FROM users
//	WHERE id = $1
//	    AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProfileImage,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BlockedAt,
		&i.BlockedUntil,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const getUserBySessionToken = `-- name: GetUserBySessionToken :one
SELECT u.id, u.username, u.profile_image, u.first_name, u.middle_name, u.last_name, u.created_at, u.updated_at, u.blocked_at, u.blocked_until, u.deleted_at, u.role_id
FROM session AS s
    JOIN login_option AS lo ON s.originated_from = lo.id
    JOIN users AS u ON u.id = lo.user_id
WHERE s.token = $1
    AND s.deleted_at IS NULL
    AND u.deleted_at IS NULL
    AND lo.deleted_at IS NULL
    AND s.expires_at > NOW()
LIMIT 1
`

// GetUserBySessionToken
//
//	SELECT u.id, u.username, u.profile_image, u.first_name, u.middle_name, u.last_name, u.created_at, u.updated_at, u.blocked_at, u.blocked_until, u.deleted_at, u.role_id
//	FROM session AS s
//	    JOIN login_option AS lo ON s.originated_from = lo.id
//	    JOIN users AS u ON u.id = lo.user_id
//	WHERE s.token = $1
//	    AND s.deleted_at IS NULL
//	    AND u.deleted_at IS NULL
//	    AND lo.deleted_at IS NULL
//	    AND s.expires_at > NOW()
//	LIMIT 1
func (q *Queries) GetUserBySessionToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRow(ctx, getUserBySessionToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProfileImage,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BlockedAt,
		&i.BlockedUntil,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const isUsernameUsed = `-- name: IsUsernameUsed :one
SELECT COUNT(*)
FROM users
WHERE username = $1
`

// IsUsernameUsed
//
//	SELECT COUNT(*)
//	FROM users
//	WHERE username = $1
func (q *Queries) IsUsernameUsed(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, isUsernameUsed, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users
SET deleted_at = NOW()
WHERE id = $1
`

// SoftDeleteUser
//
//	UPDATE users
//	SET deleted_at = NOW()
//	WHERE id = $1
func (q *Queries) SoftDeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, softDeleteUser, id)
	return err
}

const updateUserData = `-- name: UpdateUserData :one
UPDATE users SET
username = $2,
profile_image = $3,
first_name = $4,
last_name = $5,
role_id = $6
WHERE id = $1
RETURNING id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
`

type UpdateUserDataParams struct {
	ID           int32       `json:"id"`
	Username     string      `json:"username"`
	ProfileImage pgtype.Text `json:"profile_image"`
	FirstName    string      `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	RoleID       pgtype.Int4 `json:"role_id"`
}

// UpdateUserData
//
//	UPDATE users SET
//	username = $2,
//	profile_image = $3,
//	first_name = $4,
//	last_name = $5,
//	role_id = $6
//	WHERE id = $1
//	RETURNING id, username, profile_image, first_name, middle_name, last_name, created_at, updated_at, blocked_at, blocked_until, deleted_at, role_id
func (q *Queries) UpdateUserData(ctx context.Context, arg UpdateUserDataParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserData,
		arg.ID,
		arg.Username,
		arg.ProfileImage,
		arg.FirstName,
		arg.LastName,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ProfileImage,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BlockedAt,
		&i.BlockedUntil,
		&i.DeletedAt,
		&i.RoleID,
	)
	return i, err
}

const updateUsernameForUser = `-- name: UpdateUsernameForUser :exec
UPDATE users SET
username = $2
WHERE id = $1
`

type UpdateUsernameForUserParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

// UpdateUsernameForUser
//
//	UPDATE users SET
//	username = $2
//	WHERE id = $1
func (q *Queries) UpdateUsernameForUser(ctx context.Context, arg UpdateUsernameForUserParams) error {
	_, err := q.db.Exec(ctx, updateUsernameForUser, arg.ID, arg.Username)
	return err
}
