// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: oauth_connection.sql

package database_queries

import (
	"context"
)

const oauthConnectionCreate = `-- name: OauthConnectionCreate :one
INSERT INTO oauth_connection (
        provider_name,
        scopes
    )
VALUES (
    $1::text,
    $2::text[]
)
RETURNING id, provider_name, scopes, created_at, updated_at, deleted_at
`

type OauthConnectionCreateParams struct {
	ProviderName string   `json:"provider_name"`
	Scopes       []string `json:"scopes"`
}

// OauthConnectionCreate
//
//	INSERT INTO oauth_connection (
//	        provider_name,
//	        scopes
//	    )
//	VALUES (
//	    $1::text,
//	    $2::text[]
//	)
//	RETURNING id, provider_name, scopes, created_at, updated_at, deleted_at
func (q *Queries) OauthConnectionCreate(ctx context.Context, arg OauthConnectionCreateParams) (OauthConnection, error) {
	row := q.db.QueryRow(ctx, oauthConnectionCreate, arg.ProviderName, arg.Scopes)
	var i OauthConnection
	err := row.Scan(
		&i.ID,
		&i.ProviderName,
		&i.Scopes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
