// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: oauth_integration.sql

package database_queries

import (
	"context"
)

const oauthIntegrationUpdateToOauthConnectionBasedOnNewScopes = `-- name: OauthIntegrationUpdateToOauthConnectionBasedOnNewScopes :exec
WITH oauth_connection_record AS (
    SELECT
        $2::text AS provider_name,
        $3::text[] AS scopes
),
oauth_connection_record_merge_op AS (
    MERGE INTO oauth_connection AS target
    USING oauth_connection_record AS r
    ON target.provider_name = r.provider_name AND target.scopes = r.scopes
    WHEN NOT MATCHED THEN
        INSERT (provider_name, scopes)
        VALUES (r.provider_name, r.scopes)
),
oauth_connection_row AS (
    SELECT id, provider_name, scopes, created_at, updated_at, deleted_at from oauth_connection
    WHERE provider_name = $2::text
        AND scopes = $3::text[]
)
UPDATE oauth_integration
SET oauth_connection_id = (SELECT id FROM oauth_connection_row)
WHERE id = $1::int
`

type OauthIntegrationUpdateToOauthConnectionBasedOnNewScopesParams struct {
	IntegrationID int32    `json:"integration_id"`
	ProviderName  string   `json:"provider_name"`
	OauthScopes   []string `json:"oauth_scopes"`
}

// OauthIntegrationUpdateToOauthConnectionBasedOnNewScopes
//
//	WITH oauth_connection_record AS (
//	    SELECT
//	        $2::text AS provider_name,
//	        $3::text[] AS scopes
//	),
//	oauth_connection_record_merge_op AS (
//	    MERGE INTO oauth_connection AS target
//	    USING oauth_connection_record AS r
//	    ON target.provider_name = r.provider_name AND target.scopes = r.scopes
//	    WHEN NOT MATCHED THEN
//	        INSERT (provider_name, scopes)
//	        VALUES (r.provider_name, r.scopes)
//	),
//	oauth_connection_row AS (
//	    SELECT id, provider_name, scopes, created_at, updated_at, deleted_at from oauth_connection
//	    WHERE provider_name = $2::text
//	        AND scopes = $3::text[]
//	)
//	UPDATE oauth_integration
//	SET oauth_connection_id = (SELECT id FROM oauth_connection_row)
//	WHERE id = $1::int
func (q *Queries) OauthIntegrationUpdateToOauthConnectionBasedOnNewScopes(ctx context.Context, arg OauthIntegrationUpdateToOauthConnectionBasedOnNewScopesParams) error {
	_, err := q.db.Exec(ctx, oauthIntegrationUpdateToOauthConnectionBasedOnNewScopes, arg.IntegrationID, arg.ProviderName, arg.OauthScopes)
	return err
}
