// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const sessionCreateNewSession = `-- name: SessionCreateNewSession :one
INSERT INTO session (
        token,
        originated_from,
        used_installation,
        expires_at
    )
VALUES ($1, $2, $3, $4)
RETURNING id
`

type SessionCreateNewSessionParams struct {
	Token            string             `json:"token"`
	OriginatedFrom   int32              `json:"originated_from"`
	UsedInstallation int32              `json:"used_installation"`
	ExpiresAt        pgtype.Timestamptz `json:"expires_at"`
}

// SessionCreateNewSession
//
//	INSERT INTO session (
//	        token,
//	        originated_from,
//	        used_installation,
//	        expires_at
//	    )
//	VALUES ($1, $2, $3, $4)
//	RETURNING id
func (q *Queries) SessionCreateNewSession(ctx context.Context, arg SessionCreateNewSessionParams) (int32, error) {
	row := q.db.QueryRow(ctx, sessionCreateNewSession,
		arg.Token,
		arg.OriginatedFrom,
		arg.UsedInstallation,
		arg.ExpiresAt,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const sessionGetActiveSessionById = `-- name: SessionGetActiveSessionById :one
SELECT id, token, created_at, updated_at, expires_at, deleted_at, originated_from, used_installation
FROM session
WHERE id = $1
    AND expires_at > NOW()
    AND deleted_at IS NULL
LIMIT 1
`

// SessionGetActiveSessionById
//
//	SELECT id, token, created_at, updated_at, expires_at, deleted_at, originated_from, used_installation
//	FROM session
//	WHERE id = $1
//	    AND expires_at > NOW()
//	    AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) SessionGetActiveSessionById(ctx context.Context, id int32) (Session, error) {
	row := q.db.QueryRow(ctx, sessionGetActiveSessionById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.DeletedAt,
		&i.OriginatedFrom,
		&i.UsedInstallation,
	)
	return i, err
}

const sessionGetActiveSessionByToken = `-- name: SessionGetActiveSessionByToken :one
SELECT id, token, created_at, updated_at, expires_at, deleted_at, originated_from, used_installation
FROM session
WHERE token = $1
    AND expires_at > NOW()
    AND deleted_at IS NULL
LIMIT 1
`

// SessionGetActiveSessionByToken
//
//	SELECT id, token, created_at, updated_at, expires_at, deleted_at, originated_from, used_installation
//	FROM session
//	WHERE token = $1
//	    AND expires_at > NOW()
//	    AND deleted_at IS NULL
//	LIMIT 1
func (q *Queries) SessionGetActiveSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, sessionGetActiveSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.DeletedAt,
		&i.OriginatedFrom,
		&i.UsedInstallation,
	)
	return i, err
}

const sessionSoftDeleteSession = `-- name: SessionSoftDeleteSession :exec
UPDATE session
SET deleted_at = NOW()
WHERE id = $1
`

// SessionSoftDeleteSession
//
//	UPDATE session
//	SET deleted_at = NOW()
//	WHERE id = $1
func (q *Queries) SessionSoftDeleteSession(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, sessionSoftDeleteSession, id)
	return err
}
